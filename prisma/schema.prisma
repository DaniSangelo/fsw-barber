generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  bookings      Booking[]
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model BarberShop {
  id                 String              @id @default(uuid())
  name               String
  description        String
  address            String
  phones             String[]
  imageUrl           String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  barberShopServices BarberShopService[]
}

model BarberShopService {
  id           String     @id @default(uuid())
  name         String
  description  String
  imageUrl     String
  price        Decimal    @db.Decimal(10, 2)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  barberShopId String
  barberShop   BarberShop @relation(fields: [barberShopId], references: [id])
  bookings     Booking[]
}

model Booking {
  id                  String            @id @default(uuid())
  userId              String
  user                User              @relation(fields: [userId], references: [id])
  barberShopServiceId String
  service             BarberShopService @relation(fields: [barberShopServiceId], references: [id])
  date                DateTime
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
